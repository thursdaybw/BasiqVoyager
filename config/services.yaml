# This file is the entry point to configure your own services.
# Files in the packages/ subdirectory configure your dependencies.

# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices.html#use-parameters-for-application-configuration
parameters:
    basiq_api_settings:
        user_id: '%env(USER_ID)%'
        api_key: '%env(API_KEY)%'

services:
    # default configuration for services in *this* file
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.

    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    App\:
        resource: '../src/'
        exclude:
            - '../src/DependencyInjection/'
            - '../src/Entity/'
            - '../src/Kernel.php'

    # Add more service definitions when explicit configuration is needed
    # please note that last definitions always *replace* previous ones

    #app.pocketsmith_api_factory:
    #    class: App\Application\BankingDataApi\PocksmithApiFactory

    bankingdata.api:
        class: App\Application\BankingDataApi\BankingDataApiInterface
        factory: ['@App\Application\BankingDataApi\PocksmithApiFactory', 'create']
        arguments:
            $settings: '%basiq_api_settings%'

    ## Wrapper to BasiqApi defined in our webapp scope.
    App\BankingDataApi\ApiInterface:
        class: App\Application\BankingDataApi\PocketsmithApiWrapper
        arguments:
            $api: '@bankingdata.api'

    App\Application\ConsentService: ~
    App\Application\AccountService: ~
    App\Application\UserService:
        class: \App\Application\UserService
        arguments:
            - '@bankingdata.api'

    # @todo Want to move thins banking data to a symfony package,
    # will need to do something about the paremeters up top of this page
    # and here too.
    # This configuatin facory is a good start, it manages the basiq api
    # configuration for us.
    App\Application\BankingDataApi\Configuration\BasiqApiConfiguration:
        arguments:
            $basiqApiSettings: '%basiq_api_settings%'

    # This lot allows the HomePageService to depend on a $userId
    # via the BasiqApiConfiguration manager, keeping it isolated from secrets.
    app.basiq_user_id:
        class: string
        factory: ['@App\Application\BankingDataApi\Configuration\BasiqApiConfiguration', 'getUserId']

    #App\Application\UserService:
    #    factory: ['App\Application\BankingDataApi\PocksmithApiFactory', 'create']
    #    arguments:
    #        $settings: '%basiq_api_settings%'

    App\Application\HomePageService:
        arguments:
            $userId: '@app.basiq_user_id'
